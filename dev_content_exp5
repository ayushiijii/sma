import pandas as pd
from textblob import TextBlob
import matplotlib.pyplot as plt

# Load the IMDB dataset
df = pd.read_csv(r'C:\Users\Ayushi\Desktop\submissions\SMA\IMDB-Dataset.csv')

# Function for sentiment analysis
def get_sentiment(text):
    polarity = TextBlob(text).sentiment.polarity
    if polarity > 0.1:
        return "Positive"
    elif polarity < -0.1:
        return "Negative"
    else:
        return "Neutral"

# Apply sentiment analysis
df['Sentiment'] = df['review'].apply(get_sentiment)

# Generate simple content based on sentiment
def generate_post(sentiment):
    if sentiment == "Positive":
        return "This movie is amazing! A must-watch! ðŸŽ‰"
    elif sentiment == "Negative":
        return "Disappointing experience. Would not recommend. ðŸ˜ž"
    else:
        return "An okay movie. Could be better. ðŸ¤”"

df['Generated_Content'] = df['Sentiment'].apply(generate_post)

# Save results
output_path = r'C:\Users\Ayushi\Desktop\submissions\SMA\generated_content.csv'
df[['review', 'Sentiment', 'Generated_Content']].to_csv(output_path, index=False)

print("Content generation complete! Check generated_content.csv")

# Load and print first 10 rows of generated content
df_output = pd.read_csv(output_path)
print(df_output.head(10))

# Plot sentiment distribution
sentiment_counts = df['Sentiment'].value_counts()

plt.figure(figsize=(6, 4))
plt.bar(sentiment_counts.index, sentiment_counts.values, color=['green', 'red', 'blue'])
plt.xlabel("Sentiment")
plt.ylabel("Number of Reviews")
plt.title("Sentiment Analysis of IMDB Reviews")
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Save the graph
graph_path = r'C:\Users\Ayushi\Desktop\submissions\SMA\sentiment_distribution.png'
plt.savefig(graph_path)
plt.show()

print(f"Sentiment distribution graph saved at: {graph_path}")
